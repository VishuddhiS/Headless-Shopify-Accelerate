'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@vue-storefront/core');
var contentful = require('contentful');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var contentful__namespace = /*#__PURE__*/_interopNamespace(contentful);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var getContent = function (_a, _b) {
    var client = _a.client, config = _a.config;
    var url = _b.url, custom = _b.custom, id = _b.id, locale = _b.locale, _c = _b.include, include = _c === void 0 ? 3 : _c, _d = _b.environment, environment = _d === void 0 ? 'master' : _d, _e = _b.preview, preview = _e === void 0 ? false : _e;
    return __awaiter(void 0, void 0, void 0, function () {
        var accessToken, previewToken, space, contentful, items, _f, error_1;
        var _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    accessToken = config.token, previewToken = config.previewToken, space = config.space;
                    if (preview)
                        core.Logger.warn('You are viewing the draft version of your content.');
                    if (!custom && !url && !id) {
                        return [2 /*return*/, core.Logger.error("Can't get data from Contentful. Define page url, id or custom search config.")];
                    }
                    if (custom && (!custom.value || !custom.field)) {
                        return [2 /*return*/, core.Logger.error("Can't get data from Contentful. For custom search provide: field, value. Optionally provide type, default is 'page'.")];
                    }
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 6, , 7]);
                    contentful = client.createClient({
                        space: space,
                        environment: environment,
                        accessToken: preview ? previewToken : accessToken,
                        host: (preview ? 'preview' : 'cdn') + ".contentful.com",
                    });
                    if (!id) return [3 /*break*/, 3];
                    return [4 /*yield*/, contentful.getEntry(id)];
                case 2:
                    _f = _h.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, contentful.getEntries(__assign({ content_type: (custom && custom.type) || 'page', locale: locale,
                        include: include }, (url ? { 'fields.url[in]': url } : (_g = {}, _g["fields." + custom.field + "[in]"] = custom.value, _g))))];
                case 4:
                    _f = _h.sent();
                    _h.label = 5;
                case 5:
                    items = _f;
                    return [2 /*return*/, id ? [items] : items.items];
                case 6:
                    error_1 = _h.sent();
                    return [2 /*return*/, core.Logger.error("Can't get data from Contentful.", error_1)];
                case 7: return [2 /*return*/];
            }
        });
    });
};

var api = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getContent: getContent
});

var setup = function (settings) {
    return {
        config: __assign({}, settings),
        client: contentful__namespace,
    };
};
var createApiClient = core.apiClientFactory({
    onCreate: setup,
    api: api,
}).createApiClient;

exports.createApiClient = createApiClient;
//# sourceMappingURL=index.js.map
